{"version":3,"file":"MySQLConnector.js","sourceRoot":"","sources":["MySQLConnector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mysql from 'mysql';\r\n// @ts-ignore\r\nimport * as config from './config.json';\r\n//\r\nexport namespace sql {\r\n\r\n    /**\r\n     * Class for Managing The SQL Connection\r\n     */\r\n    export class MySQLConnector {\r\n\r\n        /**\r\n         * The DB Connection\r\n         */\r\n        private connection: any;\r\n\r\n        /**\r\n         * Config, read from config.json\r\n         */\r\n        private MySQLConfig = {\r\n            host: config.MySQLConnectionInformation.host,\r\n            user: config.MySQLConnectionInformation.user,\r\n            password: config.MySQLConnectionInformation.password,\r\n            database: config.MySQLConnectionInformation.database\r\n        };\r\n\r\n        constructor() {\r\n            this.connection = mysql.createConnection(this.MySQLConfig);\r\n        }\r\n\r\n        /**\r\n         * Unused query function\r\n         * Stays here as an example\r\n         * @param sql\r\n         * @param args\r\n         */\r\n        private query(sql, args) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(sql, args, (err, rows) => {\r\n                    if (err)\r\n                        return reject(err);\r\n                    resolve(rows);\r\n                });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Delivers multiple Oids\r\n         * @param filter some string\r\n         */\r\n        retrieveOidTable() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"Select * from Oid\",\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param filter\r\n         */\r\n        retrieveOidVersion() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"Select `DValue` as Version from Directory where `DKey` = 'OidVersion'\", [],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         * @param filter\r\n         */\r\n        retrieveMPSVersion() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"Select `DValue` as Version from Directory where `DKey` = 'Version'\", [],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param filter\r\n         */\r\n        retrieveMPSMinClientVersion() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"Select `DValue` as Version from Directory where `DKey` = 'MinClientVersion'\", [],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        resolve(rows);\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Checks an Token\r\n         * returns an boolean\r\n         * @param token a tokenString\r\n         */\r\n        checkAccessToken(token: string): Promise<boolean> {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"Select * from AccessToken where Token = ?\",\r\n                    [token],\r\n                    (err, rows) => {\r\n                        if (err)\r\n                            return reject(err);\r\n                        if (rows.length == 1) {\r\n                            resolve(true);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Inserts the Log of the Server\r\n         * @param socketId\r\n         * @param message\r\n         */\r\n        insertServerLog(socketId: string, message: string) {\r\n            this.connection.query(\"INSERT INTO `ServerLog`\" +\r\n                \"(\" +\r\n                \"`SocketId`,\" +\r\n                \"`Message`)\" +\r\n                \"VALUES\" +\r\n                \"(?, ?)\",\r\n                [socketId, message]\r\n                , (err) => {\r\n                    if (err)\r\n                        console.log(err);\r\n                });\r\n        }\r\n\r\n        insertOidSet(oidSet: any) {\r\n\r\n            for (let i = 0; i <  oidSet.length; i++) {\r\n                this.insertOid(oidSet[i]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        insertOid(oidData: any) {\r\n            this.connection.query(\"Insert into `OidData` (\" +\r\n                \" `CustomerReference`,\" +\r\n                \" `VendorName`,\" +\r\n                \" `Model`,\" +\r\n                \" `SerialNumber`,\" +\r\n                \" `MacAddress`,\" +\r\n                \" `IpAddress`,\" +\r\n                \" `HostName`,\" +\r\n                \" `DescriptionLocation`,\" +\r\n                \" `AssetNumber`,\" +\r\n                \" `FirmwareVersion`,\" +\r\n                \" `PowerSleep1`,\" +\r\n                \" `PowerSleep2`,\" +\r\n                \" `ProfileName`,\" +\r\n                \" `DeviceName`,\" +\r\n                \" `DeviceType`,\" +\r\n                \" `Manufacturer`,\" +\r\n                \" `TotalPages`,\" +\r\n                \" `TotalPagesMono`,\" +\r\n                \" `TotalPagesColor`,\" +\r\n                \" `TotalPagesDuplex`,\" +\r\n                \" `PrinterPages`,\" +\r\n                \" `PrinterPagesMono`,\" +\r\n                \" `PrinterPagesColor`,\" +\r\n                \" `PrinterPagesFullColor`,\" +\r\n                \" `PrinterPagesTwoColor`,\" +\r\n                \" `CopyPagesMono`,\" +\r\n                \" `CopyPagesColor`,\" +\r\n                \" `CopyPagesFullColor`,\" +\r\n                \" `CopyPagesTwoColor`,\" +\r\n                \" `CopyPagesSingleColor`,\" +\r\n                \" `FaxesSentFaxesReceived`,\" +\r\n                \" `ScansTotalScansTotalMono`,\" +\r\n                \" `ScansTotalColor`,\" +\r\n                \" `ScansCopyMono`,\" +\r\n                \" `ScansCopyColor`,\" +\r\n                \" `ScansEmail`,\" +\r\n                \" `ScansEmailMono`,\" +\r\n                \" `ScansNet`,\" +\r\n                \" `ScansNetMono`,\" +\r\n                \" `ScansNetColor`,\" +\r\n                \" `LargePagesMono`,\" +\r\n                \" `LargePagesFullColor`,\" +\r\n                \" `CoverageAverageBlack`,\" +\r\n                \" `CoverageAverageCyan`,\" +\r\n                \" `CoverageAverageMagenta`,\" +\r\n                \" `CoverageAverageYellow`,\" +\r\n                \" `BlackLevelMax`,\" +\r\n                \" `CyanLevelMax`,\" +\r\n                \" `MagentaLevelMax`,\" +\r\n                \" `YellowLevelMax`,\" +\r\n                \" `BlackLevel`,\" +\r\n                \" `CyanLevel`,\" +\r\n                \" `MagentaLevel`,\" +\r\n                \" `YellowLevel`\" +\r\n                \") VALUES (\" +\r\n                \"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\" +\r\n                \" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\" +\r\n                \" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\",\r\n                [oidData[\"CustomerReference\"],\r\n                    oidData[\"VendorName\"],\r\n                    oidData[\"Model\"],\r\n                    oidData[\"SerialNumber\"],\r\n                    oidData[\"MacAddress\"],\r\n                    oidData[\"IpAddress\"],\r\n                    oidData[\"HostName\"],\r\n                    oidData[\"DescriptionLocation\"],\r\n                    oidData[\"AssetNumber\"],\r\n                    oidData[\"FirmwareVersion\"],\r\n                    oidData[\"PowerSleep1\"],\r\n                    oidData[\"PowerSleep2\"],\r\n                    oidData[\"ProfileName\"],\r\n                    oidData[\"DeviceName\"],\r\n                    oidData[\"DeviceType\"],\r\n                    oidData[\"Manufacturer\"],\r\n                    oidData[\"TotalPages\"],\r\n                    oidData[\"TotalPagesMono\"],\r\n                    oidData[\"TotalPagesColor\"],\r\n                    oidData[\"TotalPagesDuplex\"],\r\n                    oidData[\"PrinterPages\"],\r\n                    oidData[\"PrinterPagesMono\"],\r\n                    oidData[\"PrinterPagesColor\"],\r\n                    oidData[\"PrinterPagesFullColor\"],\r\n                    oidData[\"PrinterPagesTwoColor\"],\r\n                    oidData[\"CopyPagesMono\"],\r\n                    oidData[\"CopyPagesColor\"],\r\n                    oidData[\"CopyPagesFullColor\"],\r\n                    oidData[\"CopyPagesTwoColor\"],\r\n                    oidData[\"CopyPagesSingleColor\"],\r\n                    oidData[\"FaxesSentFaxesReceived\"],\r\n                    oidData[\"ScansTotalScansTotalMono\"],\r\n                    oidData[\"ScansTotalColor\"],\r\n                    oidData[\"ScansCopyMono\"],\r\n                    oidData[\"ScansCopyColor\"],\r\n                    oidData[\"ScansEmail\"],\r\n                    oidData[\"ScansEmailMono\"],\r\n                    oidData[\"ScansNet\"],\r\n                    oidData[\"ScansNetMono\"],\r\n                    oidData[\"ScansNetColor\"],\r\n                    oidData[\"LargePagesMono\"],\r\n                    oidData[\"LargePagesFullColor\"],\r\n                    oidData[\"CoverageAverageBlack\"],\r\n                    oidData[\"CoverageAverageCyan\"],\r\n                    oidData[\"CoverageAverageMagenta\"],\r\n                    oidData[\"CoverageAverageYellow\"],\r\n                    oidData[\"BlackLevelMax\"],\r\n                    oidData[\"CyanLevelMax\"],\r\n                    oidData[\"MagentaLevelMax\"],\r\n                    oidData[\"YellowLevelMax\"],\r\n                    oidData[\"BlackLevel\"],\r\n                    oidData[\"CyanLevel\"],\r\n                    oidData[\"MagentaLevel\"],\r\n                    oidData[\"YellowLevel\"]]\r\n                , (err) => {\r\n                    if (err)\r\n                        console.log(err);\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Closes the DB Connection\r\n         */\r\n        close() {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.end(err => {\r\n                    if (err)\r\n                        return reject(err);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n    }\r\n}"]}