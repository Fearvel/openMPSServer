{"version":3,"file":"MySQLConnector.js","sourceRoot":"","sources":["MySQLConnector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mysql from 'mysql';\n// @ts-ignore\nimport * as config from './config.json';\n//\nexport namespace sql {\n\n    /**\n     * Class for Managing The SQL Connection\n     */\n    export class MySQLConnector {\n\n        /**\n         * The DB Connection\n         */\n        private connection: any;\n\n        /**\n         * Config, read from config.json\n         */\n        private MySQLConfig = {\n            host: config.MySQLConnectionInformation.host,\n            user: config.MySQLConnectionInformation.user,\n            password: config.MySQLConnectionInformation.password,\n            database: config.MySQLConnectionInformation.database\n        };\n\n        constructor() {\n            this.connection = mysql.createConnection(this.MySQLConfig);\n        }\n\n        /**\n         * Unused query function\n         * Stays here as an example\n         * @param sql\n         * @param args\n         */\n        private query(sql, args) {\n            return new Promise((resolve, reject) => {\n                this.connection.query(sql, args, (err, rows) => {\n                    if (err)\n                        return reject(err);\n                    resolve(rows);\n                });\n            });\n        }\n\n        /**\n         * Delivers multiple Oids\n         * @param filter some string\n         */\n        getOidTable() {\n            return new Promise((resolve, reject) => {\n                this.connection.query(\"Select * from Oid\",\n                    (err, rows) => {\n                        if (err)\n                            return reject(err);\n                        resolve(rows);\n                    });\n            });\n        }\n\n        /**\n         *\n         * @param filter\n         */\n        getOidVersion() {\n            return new Promise((resolve, reject) => {\n                this.connection.query(\"Select `DValue` as Version from Directory where `DKey` = 'OidVersion'\", [],\n                    (err, rows) => {\n                        if (err)\n                            return reject(err);\n                        resolve(rows);\n                    });\n            });\n        }\n\n        /**\n         *\n         * @param filter\n         */\n        getMPSVersion() {\n            return new Promise((resolve, reject) => {\n                this.connection.query(\"Select `DValue` as Version from Directory where `DKey` = 'Version'\", [],\n                    (err, rows) => {\n                        if (err)\n                            return reject(err);\n                        resolve(rows);\n                    });\n            });\n        }\n\n        /**\n         * Checks an Token\n         * returns an boolean\n         * @param token a tokenString\n         */\n        checkAccessToken(token: string): Promise<boolean> {\n            return new Promise((resolve, reject) => {\n                this.connection.query(\"Select * from AccessToken where Token = ?\",\n                    [token],\n                    (err, rows) => {\n                        if (err)\n                            return reject(err);\n                        if (rows.length == 1) {\n                            resolve(true);\n                        } else {\n                            resolve(false);\n                        }\n                    });\n            });\n        }\n\n        /**\n         * Inserts the Log of the Server\n         * @param socketId\n         * @param message\n         */\n        insertServerLog(socketId: string, message: string) {\n            this.connection.query(\"INSERT INTO `ServerLog`\" +\n                \"(\" +\n                \"`SocketId`,\" +\n                \"`Message`)\" +\n                \"VALUES\" +\n                \"(?, ?)\",\n                [socketId, message]\n                , (err) => {\n                    if (err)\n                        console.log(err);\n                });\n        }\n\n        insertOidSet(oidSet: any) {\n\n            for (let i = 0; i <  oidSet.length; i++) {\n                this.insertOid(oidSet[i]);\n\n            }\n\n        }\n\n        insertOid(oidData: any) {\n            this.connection.query(\"Insert into `OidData` (\" +\n                \" `customerRef`,\" +\n                \" `VendorName`,\" +\n                \" `Model`,\" +\n                \" `SerialNumber`,\" +\n                \" `MacAddress`,\" +\n                \" `IpAddress`,\" +\n                \" `HostName`,\" +\n                \" `DescriptionLocation`,\" +\n                \" `AssetNumber`,\" +\n                \" `FirmwareVersion`,\" +\n                \" `PowerSleep1`,\" +\n                \" `PowerSleep2`,\" +\n                \" `ProfileName`,\" +\n                \" `DeviceName`,\" +\n                \" `DeviceType`,\" +\n                \" `Manufacturer`,\" +\n                \" `TotalPages`,\" +\n                \" `TotalPagesMono`,\" +\n                \" `TotalPagesColor`,\" +\n                \" `TotalPagesDuplex`,\" +\n                \" `PrinterPages`,\" +\n                \" `PrinterPagesMono`,\" +\n                \" `PrinterPagesColor`,\" +\n                \" `PrinterPagesFullColor`,\" +\n                \" `PrinterPagesTwoColor`,\" +\n                \" `CopyPagesMono`,\" +\n                \" `CopyPagesColor`,\" +\n                \" `CopyPagesFullColor`,\" +\n                \" `CopyPagesTwoColor`,\" +\n                \" `CopyPagesSingleColor`,\" +\n                \" `FaxesSentFaxesReceived`,\" +\n                \" `ScansTotalScansTotalMono`,\" +\n                \" `ScansTotalColor`,\" +\n                \" `ScansCopyMono`,\" +\n                \" `ScansCopyColor`,\" +\n                \" `ScansEmail`,\" +\n                \" `ScansEmailMono`,\" +\n                \" `ScansNet`,\" +\n                \" `ScansNetMono`,\" +\n                \" `ScansNetColor`,\" +\n                \" `LargePagesMono`,\" +\n                \" `LargePagesFullColor`,\" +\n                \" `CoverageAverageBlack`,\" +\n                \" `CoverageAverageCyan`,\" +\n                \" `CoverageAverageMagenta`,\" +\n                \" `CoverageAverageYellow`,\" +\n                \" `BlackLevelMax`,\" +\n                \" `CyanLevelMax`,\" +\n                \" `MagentaLevelMax`,\" +\n                \" `YellowLevelMax`,\" +\n                \" `BlackLevel`,\" +\n                \" `CyanLevel`,\" +\n                \" `MagentaLevel`,\" +\n                \" `YellowLevel`\" +\n                \") VALUES (\" +\n                \"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\" +\n                \" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,\" +\n                \" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\",\n                [oidData[\"customerRef\"],\n                    oidData[\"VendorName\"],\n                    oidData[\"Model\"],\n                    oidData[\"SerialNumber\"],\n                    oidData[\"MacAddress\"],\n                    oidData[\"IpAddress\"],\n                    oidData[\"HostName\"],\n                    oidData[\"DescriptionLocation\"],\n                    oidData[\"AssetNumber\"],\n                    oidData[\"FirmwareVersion\"],\n                    oidData[\"PowerSleep1\"],\n                    oidData[\"PowerSleep2\"],\n                    oidData[\"ProfileName\"],\n                    oidData[\"DeviceName\"],\n                    oidData[\"DeviceType\"],\n                    oidData[\"Manufacturer\"],\n                    oidData[\"TotalPages\"],\n                    oidData[\"TotalPagesMono\"],\n                    oidData[\"TotalPagesColor\"],\n                    oidData[\"TotalPagesDuplex\"],\n                    oidData[\"PrinterPages\"],\n                    oidData[\"PrinterPagesMono\"],\n                    oidData[\"PrinterPagesColor\"],\n                    oidData[\"PrinterPagesFullColor\"],\n                    oidData[\"PrinterPagesTwoColor\"],\n                    oidData[\"CopyPagesMono\"],\n                    oidData[\"CopyPagesColor\"],\n                    oidData[\"CopyPagesFullColor\"],\n                    oidData[\"CopyPagesTwoColor\"],\n                    oidData[\"CopyPagesSingleColor\"],\n                    oidData[\"FaxesSentFaxesReceived\"],\n                    oidData[\"ScansTotalScansTotalMono\"],\n                    oidData[\"ScansTotalColor\"],\n                    oidData[\"ScansCopyMono\"],\n                    oidData[\"ScansCopyColor\"],\n                    oidData[\"ScansEmail\"],\n                    oidData[\"ScansEmailMono\"],\n                    oidData[\"ScansNet\"],\n                    oidData[\"ScansNetMono\"],\n                    oidData[\"ScansNetColor\"],\n                    oidData[\"LargePagesMono\"],\n                    oidData[\"LargePagesFullColor\"],\n                    oidData[\"CoverageAverageBlack\"],\n                    oidData[\"CoverageAverageCyan\"],\n                    oidData[\"CoverageAverageMagenta\"],\n                    oidData[\"CoverageAverageYellow\"],\n                    oidData[\"BlackLevelMax\"],\n                    oidData[\"CyanLevelMax\"],\n                    oidData[\"MagentaLevelMax\"],\n                    oidData[\"YellowLevelMax\"],\n                    oidData[\"BlackLevel\"],\n                    oidData[\"CyanLevel\"],\n                    oidData[\"MagentaLevel\"],\n                    oidData[\"YellowLevel\"]]\n                , (err) => {\n                    if (err)\n                        console.log(err);\n                });\n        }\n\n        /**\n         * Closes the DB Connection\n         */\n        close() {\n            return new Promise((resolve, reject) => {\n                this.connection.end(err => {\n                    if (err)\n                        return reject(err);\n                    resolve();\n                });\n            });\n        }\n    }\n}"]}