{"version":3,"file":"MySQLConnectorForManastone.js","sourceRoot":"","sources":["MySQLConnectorForManastone.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,aAAa;AACb,sCAAwC;AACxC,EAAE;AACF,IAAiB,GAAG,CAwDnB;AAxDD,WAAiB,KAAG;IAEhB;;OAEG;IACH;QAiBI;YAVA;;eAEG;YACK,gBAAW,GAAG;gBAClB,IAAI,EAAE,MAAM,CAAC,mCAAmC,CAAC,IAAI;gBACrD,IAAI,EAAE,MAAM,CAAC,mCAAmC,CAAC,IAAI;gBACrD,QAAQ,EAAE,MAAM,CAAC,mCAAmC,CAAC,QAAQ;gBAC7D,QAAQ,EAAE,MAAM,CAAC,mCAAmC,CAAC,QAAQ;aAChE,CAAC;YAGE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/D,CAAC;QAED;;;;;WAKG;QACK,0CAAK,GAAb,UAAc,GAAG,EAAE,IAAI;YAAvB,iBAQC;YAPG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,IAAI;oBACvC,IAAI,GAAG;wBACH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,uDAAkB,GAAzB,UAA0B,KAAc;YAAxC,iBAUC;YATG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,2DAA2D;oBAC7E,oCAAoC,EAClC,KAAK,EAAE,UAAC,GAAG,EAAE,IAAI;oBACnB,IAAI,GAAG;wBACH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAGL,iCAAC;IAAD,CAAC,AAlDD,IAkDC;IAlDY,gCAA0B,6BAkDtC,CAAA;AACL,CAAC,EAxDgB,GAAG,GAAH,WAAG,KAAH,WAAG,QAwDnB","sourcesContent":["import * as mysql from 'mysql';\r\n// @ts-ignore\r\nimport * as config from './config.json';\r\n//\r\nexport namespace sql {\r\n\r\n    /**\r\n     * Class for Managing The SQL Connection\r\n     */\r\n    export class MySQLConnectorForManastone {\r\n\r\n        /**\r\n         * The DB Connection\r\n         */\r\n        private connection: any;\r\n\r\n        /**\r\n         * Config, read from config.json\r\n         */\r\n        private MySQLConfig = {\r\n            host: config.MySQLConnectionInformationManastone.host,\r\n            user: config.MySQLConnectionInformationManastone.user,\r\n            password: config.MySQLConnectionInformationManastone.password,\r\n            database: config.MySQLConnectionInformationManastone.database\r\n        };\r\n\r\n        constructor() {\r\n            this.connection = mysql.createConnection(this.MySQLConfig);\r\n        }\r\n\r\n        /**\r\n         * Unused query function\r\n         * Stays here as an example\r\n         * @param sql\r\n         * @param args\r\n         */\r\n        private query(sql, args) {\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(sql, args, (err, rows) => {\r\n                    if (err)\r\n                        return reject(err);\r\n                    resolve(rows);\r\n                });\r\n            });\r\n        }\r\n\r\n        public checkIfTokenExists(token : string){\r\n            return new Promise((resolve, reject) => {\r\n                this.connection.query(\"Select EXISTS(Select * FROM `DEV-MANASTONE`.OpenMPSTokens\" +\r\n                    \" where `Token` = ?) as TokenCheck;\"\r\n                    , token, (err, rows) => {\r\n                    if (err)\r\n                        return reject(err);\r\n                    resolve(rows);\r\n                });\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n}"]}