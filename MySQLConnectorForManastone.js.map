{"version":3,"file":"MySQLConnectorForManastone.js","sourceRoot":"","sources":["MySQLConnectorForManastone.ts"],"names":[],"mappings":";;AAAA;;;;;GAKG;AACH,6BAA+B;AAC/B,aAAa;AACb,sCAAwC;AACxC,EAAE;AACF,IAAiB,GAAG,CAgEnB;AAhED,WAAiB,KAAG;IAEhB;;OAEG;IACH;QAiBI;;;WAGG;QACH;YAdA;;eAEG;YACK,gBAAW,GAAG;gBAClB,IAAI,EAAE,MAAM,CAAC,mCAAmC,CAAC,IAAI;gBACrD,IAAI,EAAE,MAAM,CAAC,mCAAmC,CAAC,IAAI;gBACrD,QAAQ,EAAE,MAAM,CAAC,mCAAmC,CAAC,QAAQ;gBAC7D,QAAQ,EAAE,MAAM,CAAC,mCAAmC,CAAC,QAAQ;aAChE,CAAC;YAOE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/D,CAAC;QAED;;;;;WAKG;QACK,0CAAK,GAAb,UAAc,GAAG,EAAE,IAAI;YAAvB,iBAQC;YAPG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,IAAI;oBACvC,IAAI,GAAG;wBACH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAED;;;WAGG;QACI,uDAAkB,GAAzB,UAA0B,KAAc;YAAxC,iBAUC;YATG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,2DAA2D;oBAC7E,oCAAoC,EAClC,KAAK,EAAE,UAAC,GAAG,EAAE,IAAI;oBACnB,IAAI,GAAG;wBACH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;QAGL,iCAAC;IAAD,CAAC,AA1DD,IA0DC;IA1DY,gCAA0B,6BA0DtC,CAAA;AACL,CAAC,EAhEgB,GAAG,GAAH,WAAG,KAAH,WAAG,QAgEnB","sourcesContent":["/**\n * Connection Class for MySql Connections\n * Used to access a the View in the Manastone Database\n * @author Andreas Schreiner\n * @copyright Andreas Schreiner 2019\n */\nimport * as mysql from 'mysql';\n// @ts-ignore\nimport * as config from './config.json';\n//\nexport namespace sql {\n\n    /**\n     * Class for Managing The SQL Connection to the Manastone Server and Database\n     */\n    export class MySQLConnectorForManastone {\n\n        /**\n         * The DB Connection\n         */\n        private connection: any;\n\n        /**\n         * Config, read from config.json\n         */\n        private MySQLConfig = {\n            host: config.MySQLConnectionInformationManastone.host,\n            user: config.MySQLConnectionInformationManastone.user,\n            password: config.MySQLConnectionInformationManastone.password,\n            database: config.MySQLConnectionInformationManastone.database\n        };\n\n        /**\n         * Constructor\n         * Creates the connection\n         */\n        constructor() {\n            this.connection = mysql.createConnection(this.MySQLConfig);\n        }\n\n        /**\n         * Unused query function\n         * Stays here as an example\n         * @param sql\n         * @param args\n         */\n        private query(sql, args) {\n            return new Promise((resolve, reject) => {\n                this.connection.query(sql, args, (err, rows) => {\n                    if (err)\n                        return reject(err);\n                    resolve(rows);\n                });\n            });\n        }\n\n        /**\n         * Checks if the Token Table has an entry with the received token\n         * @param token\n         */\n        public checkIfTokenExists(token : string){\n            return new Promise((resolve, reject) => {\n                this.connection.query(\"Select EXISTS(Select * FROM `DEV-MANASTONE`.OpenMPSTokens\" +\n                    \" where `Token` = ?) as TokenCheck;\"\n                    , token, (err, rows) => {\n                    if (err)\n                        return reject(err);\n                    resolve(rows);\n                });\n            });\n        }\n\n\n    }\n}"]}