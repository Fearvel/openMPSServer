{"version":3,"file":"OpenMPS-Server.js","sourceRoot":"","sources":["OpenMPS-Server.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\n// @ts-ignore\r\nimport * as config from './config.json';\r\nimport * as https from 'https';\r\nimport * as express from 'express';\r\nimport * as MysqlConnector from './MySQLConnector';\r\nimport * as MySQLConnectorForManastone from './MySQLConnectorForManastone';\r\n\r\n\r\nlet mysqlConnectionManager = new MysqlConnector.sql.MySQLConnector;\r\nlet mysqlConnectionManagerManastone = new MySQLConnectorForManastone.sql.MySQLConnectorForManastone;\r\n\r\nlet app = express();\r\nlet options = {\r\n    key: fs.readFileSync(config.CertPath.key),\r\n    cert: fs.readFileSync(config.CertPath.cert)\r\n};\r\nlet server = https.createServer(options, app);\r\nlet io = require('socket.io')(server);\r\n\r\nconst Version = \"1.000.0001.0000\";\r\n\r\n\r\n/**\r\n * Socket.io Server Handler\r\n * Reacts on incoming Connections\r\n */\r\nio.on('connection', (socket) => {\r\n    //   socket.emit('info', Version);\r\n    mysqlConnectionManager.insertServerLog(socket.id.toString(), \" Connection Opened\");\r\n\r\n\r\n    /**\r\n     * Handles incoming OidRequest\r\n     * Sends the latest Oid Table, if the token is in the Database\r\n     */\r\n    socket.on('OidRequest', (token) => {\r\n        let tokenData = JSON.parse(token)\r\n        try {\r\n            mysqlConnectionManagerManastone.checkIfTokenExists(tokenData.Token).then(tokenRow => {\r\n\r\n                let a = tokenRow;\r\n                if (tokenRow[0].TokenCheck == 1){\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New OidRequest\");\r\n                mysqlConnectionManager.retrieveOidTable().then(row => {\r\n                    socket.emit(\"OidOffer\", JSON.stringify(row));\r\n\r\n                });\r\n                } else {\r\n                    socket.emit(\"OidOffer\", \"[]\");\r\n\r\n                }\r\n            });\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Handles incoming SendData\r\n     * Inserts a OidDataSet into the Database\r\n     */\r\n    socket.on('SendData', (data) => {\r\n        try {\r\n            mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New Data\");\r\n            mysqlConnectionManager.insertOidSet(JSON.parse(data));\r\n            sendSimpleResult(socket, true);\r\n        } catch (e) {\r\n            sendSimpleResult(socket, false);\r\n        }\r\n\r\n    });\r\n\r\n    /**\r\n     * Handles incoming OidVersionRequest\r\n     * Sends the latest Oid Version\r\n     */\r\n    socket.on('OidVersionRequest', () => {\r\n        mysqlConnectionManager.retrieveOidVersion().then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New OidVersionRequest\");\r\n                socket.emit(\"OidVersionOffer\", JSON.stringify(row[0]));\r\n            }\r\n        );\r\n    });\r\n\r\n    /**\r\n     * Handles incoming MPSVersionRequest\r\n     * Sends the latest MPS Version\r\n     */\r\n    socket.on('MPSVersionRequest', () => {\r\n        mysqlConnectionManager.retrieveMPSVersion().then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New MPSVersionRequest\");\r\n                socket.emit(\"MPSVersion\", JSON.stringify(row[0]));\r\n            }\r\n        );\r\n    });\r\n\r\n    /**\r\n     * Handles incoming MPSMinClientVersionRequest\r\n     * Sends the latest MPS Version\r\n     */\r\n    socket.on('MPSMinClientVersionRequest', () => {\r\n        mysqlConnectionManager.retrieveMPSMinClientVersion().then(row => {\r\n                mysqlConnectionManager.insertServerLog(socket.id.toString(), \"New MPSMinClientVersionRequest\");\r\n                socket.emit(\"MPSMinClientVersionOffer\", JSON.stringify(row[0]));\r\n            }\r\n        );\r\n    });\r\n\r\n    /**\r\n     * Disconnect event\r\n     * Inserts Connection closed message into the Serverlog Table\r\n     */\r\n    socket.on('disconnect', () => {\r\n        mysqlConnectionManager.insertServerLog(socket.id.toString(), \"Connection Closed\");\r\n    });\r\n});\r\n\r\n/**\r\n * Sends a SimpleResult\r\n * @param socket\r\n * @param res\r\n * @constructor\r\n */\r\nfunction sendSimpleResult(socket, res: boolean = false): void {\r\n    socket.emit('closer', JSON.stringify({Result: res}));\r\n    socket.disconnect();\r\n}\r\n\r\n/**\r\n * Entry Point of the Socket.io server\r\n * Starts the server and outputs Version and Port\r\n */\r\nserver.listen(config.ServerPort, () => {\r\n    mysqlConnectionManager.insertServerLog(\"\", \"openMPS Server: \"\r\n        + Version + \" Listening on: \" + config.ServerPort);\r\n    console.log('openMPS Server V %s, Listening on %s', Version, config.ServerPort);\r\n});"]}